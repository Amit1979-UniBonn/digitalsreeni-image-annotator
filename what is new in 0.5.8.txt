What's New in Version 0.5.8 (Compared to 0.5.7)

Import Annotations Enhancements:

Added support for importing YOLO v8 annotations, expanding the previous capability of importing COCO JSON annotations.

Export Annotations Enhancements:

All export methods now ensure both images and annotations are exported, even if images are not initially located in the 'images' subdirectory. Additionally, 2D slices from multi-dimensional stacks (TIFF/CZI) are automatically placed in the 'images' subdirectory, making it easier to link annotations with their corresponding images.

Output Structure:

COCO JSON:
An annotations.json file is saved in the output directory along with all annotated images in a subdirectory named 'images.'

YOLO v8:
A data.yaml file containing class and image information is placed in the output directory, with images and labels organized into respective subdirectories.

Labeled Images:
The output directory contains two subdirectories: 'labeled_images' and 'images.'
In 'labeled_images,' folders named after each class hold the labeled images. A class_summary.txt file summarizing all classes is also included.

Semantic Labels:
The output directory contains two subdirectories: 'segmented_images' and 'images.'
'Segmented_images' holds the segmented images, along with a class_pixel_mapping.txt file that maps pixel values to corresponding class names.

Pascal VOC (BBox) and (BBox + Segmentation):
The output directory contains an 'Annotations' subdirectory with XML files for each image, and an 'images' subdirectory with the corresponding images.

Tools Updates:

Dataset Splitter:
The tool now organizes split datasets with COCO JSON annotations in a structure consistent with the application's annotation format. Each of the train, val, and test directories contains its respective annotation JSON file, accompanied by an 'images' subdirectory housing the corresponding images. This structure facilitates seamless loading of these JSON files into the application.

Image Augmenter:
When the 'Augment COCO JSON annotations' option is selected during image augmentation, the tool generates the output JSON file in the user-specified directory, while placing augmented images in an 'images' subdirectory. This organization aligns with the application's overall structure, ensuring consistency across all functionalities.

Bug Fixes:
Export Annotations Robustness:
The application now handles scenarios where an 'images' directory already exists in the export location. Instead of crashing, it intelligently manages image copying:

If the 'images' directory doesn't exist, it creates one and copies all relevant images as before.
If the directory already exists, it only copies new images or slices not already present.
This enhancement allows users to maintain multiple versions of COCO JSON annotations in separate files while preserving a common image repository, improving flexibility in annotation management.
